<?xml version="1.0"?>
<!--

    Copyright (C) 2010-2011 LShift Ltd.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="net.lshift.diffa.kernel.config">

  <class name="CategoryDescriptor" table="category_descriptor" abstract="true">
    <cache usage="read-write"/>
    <id name="id" type="int" column="category_id">
      <generator class="native">
        <param name="sequence">category_descriptor_sequence</param>
      </generator>
    </id>
    <discriminator column="constraint_type" type="string"/>
    <subclass name="RangeCategoryDescriptor" discriminator-value="range">
      <join table="range_category_descriptor">
        <key column="id"/>
        <property name="dataType" column="data_type" type="string"/>
        <property name="upper" column="upper_bound" type="string" not-null="false"/>
        <property name="lower" column="lower_bound" type="string" not-null="false"/>
        <property name="maxGranularity" column="max_granularity" type="string" not-null="false"/>
      </join>
    </subclass>
    <subclass name="SetCategoryDescriptor" discriminator-value="set">
      <set name="values" table="set_constraint_values" lazy="false" cascade="all" order-by="value_name">
        <key column="value_id"/>
        <element column="value_name" type="string" not-null="true"/>
      </set>
      <join table="set_category_descriptor">
        <key column="id"/>
      </join>
    </subclass>
    <subclass name="PrefixCategoryDescriptor" discriminator-value="prefix">
      <property name="prefixLength" column="prefix_length" type="int"/>
      <property name="maxLength" column="max_length" type="int"/>
      <property name="step" type="int"/>
      <join table="prefix_category_descriptor">
        <key column="id"/>
      </join>
    </subclass>
  </class>

  <class name="Endpoint" table="endpoint" abstract="false">
    <cache usage="read-write"/>
    <composite-id mapped="true" class="net.lshift.diffa.kernel.config.DomainScopedName">
      <key-property name="name" type="string" />
      <key-many-to-one name="domain" class="Domain" column="domain" lazy="false" />
    </composite-id>
    <property name="scanUrl" column="scan_url" type="string" not-null="false" unique="false" length="1024"/>
    <property name="contentRetrievalUrl" column="content_retrieval_url" type="string" not-null="false" unique="false" length="1024"/>
    <property name="versionGenerationUrl" column="version_generation_url" type="string" not-null="false" unique="false" length="1024"/>
    <property name="inboundUrl" column="inbound_url" type="string" not-null="false" unique="false" length="1024"/>
    <property name="collation" column="collation_type" type="string" not-null="true" unique="false" length="16"/>
    <map name="categories" lazy="false" cascade="all">
      <key>
        <column name="id"/>
        <column name="domain"/>
      </key>
      <index column="name" type="string"/>
      <many-to-many column="category_descriptor_id" class="CategoryDescriptor"/>
    </map>
    <set name="views" inverse="true" lazy="false">
      <key>
        <column name="endpoint"/>
        <column name="domain"/>
      </key>
      <one-to-many class="EndpointView"/>
    </set>
  </class>

  <class name="EndpointView" table="endpoint_views" abstract="false">
    <cache usage="read-write"/>
    <composite-id mapped="true" class="net.lshift.diffa.kernel.config.EndpointScopedName">
      <key-property name="name" type="string" />
      <key-many-to-one name="endpoint" class="Endpoint" lazy="false">
        <column name="endpoint" />
        <column name="domain" />
      </key-many-to-one>
    </composite-id>
    <map name="categories" lazy="false" cascade="all">
      <key>
        <column name="name"/>
        <column name="endpoint"/>
        <column name="domain"/>
      </key>
      <index column="category_name" type="string"/>
      <many-to-many column="category_descriptor_id" class="CategoryDescriptor"/>
    </map>
  </class>

  <class name="DiffaPair" table="pair" abstract="false">
    <cache usage="read-write"/>
    <composite-id mapped="true" class="net.lshift.diffa.kernel.config.DomainScopedKey">
      <key-property name="key" type="string" column="pair_key" />
      <key-many-to-one name="domain" class="Domain" column="domain" lazy="false" />
    </composite-id>
    <property name="upstream" type="string" column="upstream" not-null="true"/>
    <property name="downstream" type="string" column="downstream" not-null="true" />
    <property name="versionPolicyName" type="string" column="version_policy_name" not-null="false"/>
    <property name="matchingTimeout" type="int" column="matching_timeout" not-null="false"/>
    <property name="scanCronSpec" type="string" column="scan_cron_spec" not-null="false"/>
    <property name="allowManualScans" type="boolean" column="allow_manual_scans" not-null="false"/>
    <set name="views" inverse="true" lazy="false">
      <key>
        <column name="pair"/>
        <column name="domain"/>
      </key>
      <one-to-many class="PairView"/>
    </set>
  </class>

  <class name="PairView" table="pair_views" abstract="false">
    <cache usage="read-write"/>
    <composite-id mapped="true">
      <key-property name="name" type="string" />
      <key-many-to-one name="pair" class="DiffaPair" lazy="false">
        <column name="pair" />
        <column name="domain" />
      </key-many-to-one>
    </composite-id>
    <property name="scanCronSpec" type="string" column="scan_cron_spec" not-null="false"/>
  </class>

  <class name="Domain" table="domains" abstract="false">
    <cache usage="read-write"/>
    <id name="name" type="string" column="name"/>
    <property name="configVersion" type="int" column="config_version" not-null="true"/>
  </class>

  <class name="User" table="users" abstract="false">
    <cache usage="read-write"/>
    <id name="name" type="string" column="name"/>
    <property name="email" type="string" />
    <property name="passwordEnc" type="string" column="password_enc" />
    <property name="superuser" type="boolean" />
    <property name="token" type="string" unique="true" />
  </class>

  <class name="ServiceLimitDefinitions" table="limit_definitions" abstract="false">
    <id name="limitName" type="string" column="name"/>
    <property name="limitDescription" type="string" column="description"/>
  </class>

  <class name="SystemServiceLimits" table="system_limits" abstract="false">
    <id name="limitName" type="string" column="name"/>
    <property name="hardLimit" type="int" column="hard_limit"/>
    <property name="defaultLimit" type="int" column="default_limit"/>
  </class>

  <class name="DomainServiceLimits" table="domain_limits" abstract="false">
    <composite-id mapped="true" class="net.lshift.diffa.kernel.config.DomainScopedLimit">
      <key-property name="limitName" type="string" column="name"/>
      <key-many-to-one name="domain" class="Domain" column="domain" lazy="false"/>
    </composite-id>
    <property name="hardLimit" type="int" column="hard_limit"/>
    <property name="defaultLimit" type="int" column="default_limit"/>
  </class>

  <class name="PairServiceLimits" table="pair_limits" abstract="false">
    <composite-id mapped="true" class="net.lshift.diffa.kernel.config.PairScopedLimit">
      <key-property name="limitName" type="string" column="name"/>
      <key-many-to-one name="pair" class="DiffaPair" lazy="false">
        <column name="pair_key"/>
        <column name="domain"/>
      </key-many-to-one>
    </composite-id>
    <property name="limitValue" type="int" column="limit_value"/>
  </class>

  <class name="RepairAction" table="repair_actions" abstract="false">
    <cache usage="read-write"/>
    <composite-id mapped="true">
      <key-property name="name" type="string" column="name" />
      <key-many-to-one name="pair" class="DiffaPair" lazy="false">
        <column name="pair_key" />
        <column name="domain" />
      </key-many-to-one>
    </composite-id>
    <property name="url" type="string" column="url" />
    <property name="scope" type="string" column="scope" />
  </class>

  <class name="Escalation" table="escalations" abstract="false">
    <cache usage="read-write"/>
    <composite-id mapped="true">
      <key-property name="name" type="string" column="name" />
      <key-many-to-one name="pair" class="DiffaPair" lazy="false">
        <column name="pair_key" />
        <column name="domain" />
      </key-many-to-one>
    </composite-id>
    <property name="action" type="string" column="action" not-null="true" />
    <property name="actionType" type="string" column="action_type" not-null="true"/>
    <property name="event" type="string" column="event" not-null="true"/>
    <property name="origin" type="string" column="origin" not-null="false"/>
  </class>

  <class name="PairReport" table="pair_reports" abstract="false">
    <cache usage="read-write"/>
    <composite-id mapped="true">
      <key-property name="name" type="string" column="name" />
      <key-many-to-one name="pair" class="DiffaPair" lazy="false">
        <column name="pair_key" />
        <column name="domain" />
      </key-many-to-one>
    </composite-id>
    <property name="reportType" type="string" column="report_type" not-null="true" />
    <property name="target" type="string" column="target" not-null="true" length="1024" />
  </class>

  <query name="userByName" cacheable="true">
    select u from User u where u.name = :name
  </query>
  <query name="userByToken" cacheable="true">
    select u from User u where u.token = :token
  </query>

  <!-- Select all statements -->

  <query name="allEndpoints">
    select e from Endpoint e
  </query>

  <query name="allUsers">
    select u from User u order by u.name asc
  </query>

  <query name="allDomains">
    select d from Domain d order by d.name asc
  </query>

  <query name="allRepairActions">
    select a from RepairAction a
  </query>

  <query name="allEscalations">
    select e from Escalation e
  </query>

  <query name="rootUserCount" cacheable="true">
    select count(*) from User u where u.name in (:user_names) and u.superuser = true
  </query>

  <query name="endpointViewsByEndpoint" cacheable="true">
    select v from EndpointView v
    where
      v.endpoint.domain.name = :domain_name and
      v.endpoint.name = :endpoint_name
  </query>

  <!-- Queries by domain only -->

  <query name="domainByName" cacheable="true">
    select d from Domain d where d.name = :domain_name
  </query>

  <query name="pairsByDomain" cacheable="true">
    select p from DiffaPair p where p.domain.name = :domain_name
  </query>

  <query name="pairViewsByDomain" cacheable="true">
    select v from PairView v where v.pair.domain.name = :domain_name
  </query>

  <query name="endpointsByDomain" cacheable="true">
    select e from Endpoint e where e.domain.name = :domain_name
  </query>

  <query name="endpointViewsByDomain" cacheable="true">
    select v from EndpointView v where v.endpoint.domain.name = :domain_name
  </query>

  <query name="configVersionByDomain" cacheable="false">
    select d.configVersion from Domain d where d.name = :domain
  </query>

  <query name="upgradeConfigVersionByDomain" cacheable="false">
    update Domain d set d.configVersion = d.configVersion + 1 where d.name = :domain
  </query>


  <query name="repairActionsByPair" cacheable="true">
    select a from RepairAction a
    join a.pair as p with p.key = :pair_key
    join p.domain as d with d.name = :domain_name
  </query>

  <query name="escalationsByPair" cacheable="true">
    select e from Escalation e
    join e.pair as p with p.key = :pair_key
    join p.domain as d with d.name = :domain_name
  </query>

  <query name="reportsByPair" cacheable="true">
    select r from PairReport r
    join r.pair as p with p.key = :pair_key
    join p.domain as d with d.name = :domain_name
  </query>
  
  <!-- Limits -->

  <query name="systemHardLimitByName" cacheable="false">
    select l.hardLimit
    from SystemServiceLimits l
    where l.limitName = :limit_name
  </query>

  <query name="systemDefaultLimitByName" cacheable="false">
    select l.defaultLimit
    from SystemServiceLimits l
    where l.limitName = :limit_name
  </query>

  <query name="domainHardLimitByDomainAndName" cacheable="false">
    select l.hardLimit
    from DomainServiceLimits l
    where l.limitName = :limit_name
    and l.domain.name = :domain_name
  </query>

  <query name="domainDefaultLimitByDomainAndName" cacheable="false">
    select l.defaultLimit
    from DomainServiceLimits l
    where l.limitName = :limit_name
    and l.domain.name = :domain_name
  </query>

  <query name="pairLimitByPairAndName" cacheable="false">
    select l.limitValue
    from PairServiceLimits l
    where l.limitName = :limit_name
    and l.pair.domain.name = :domain_name
    and l.pair.key = :pair_key
  </query>

  <query name="domainServiceLimitsByDomain" cacheable="false">
    select l
    from DomainServiceLimits l
    where l.domain.name = :domain_name
  </query>

  <query name="pairServiceLimitsByDomain" cacheable="false">
    select l
    from PairServiceLimits l
    where l.pair.domain.name = :domain_name
  </query>

  <query name="domainServiceLimitsByName" cacheable="false">
    select l
    from DomainServiceLimits l
    where l.limitName = :limit_name
  </query>

  <query name="pairServiceLimitsByName" cacheable="false">
    select l
    from PairServiceLimits l
    where l.limitName = :limit_name
  </query>

  <query name="pairViewsByPair" cacheable="false">
    select v from PairView v
    where v.pair.domain.name = :domain_name and v.pair.key = :pair_key
  </query>

</hibernate-mapping>
