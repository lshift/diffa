<?xml version="1.0"?>
<!--

    Copyright (C) 2010-2011 LShift Ltd.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping package="net.lshift.diffa.kernel.differencing">
  <class name="PendingDifferenceEvent" table="pending_diffs">
    <id name="oid">
      <generator class="native">
        <param name="sequence">pending_diffs_sequence</param>
      </generator>
    </id>
    <component name="objId">
      <property name="id" type="string" column="entity_id" index="pdiff_domain_idx" />
      <component name="pair">
        <property name="domain" type="string" column="domain" index="pdiff_domain_idx" />
        <property name="key" type="string" column="pair" index="pdiff_domain_idx" />
      </component>
    </component>
    <property name="detectedAt" type="org.jadira.usertype.dateandtime.joda.PersistentDateTime" column="detected_at" not-null="true" />
    <property name="lastSeen" type="org.jadira.usertype.dateandtime.joda.PersistentDateTime" column="last_seen" not-null="true" />
    <property name="upstreamVsn" type="string" column="upstream_vsn" />
    <property name="downstreamVsn" type="string" column="downstream_vsn" />
  </class>

  <class name="ReportedDifferenceEvent" table="diffs">
    <id name="seqId">
      <column name="seq_id" index="seq_id_domain_idx"/>
      <generator class="native">
        <param name="sequence">diffs_sequence</param>
      </generator>
    </id>
    <component name="objId">
      <property name="id" type="string" column="entity_id" index="rdiff_domain_idx" />
      <component name="pair">
        <property name="domain" type="string" column="domain" index="rdiff_domain_idx, seq_id_domain_idx" />
        <property name="key" type="string" column="pair" index="rdiff_domain_idx" />
      </component>
    </component>
    <property name="isMatch" type="boolean" column="is_match" index="rdiff_ismatched" />
    <property name="detectedAt" type="org.jadira.usertype.dateandtime.joda.PersistentDateTime" column="detected_at" not-null="true" index="diff_detection" />
    <property name="lastSeen" type="org.jadira.usertype.dateandtime.joda.PersistentDateTime" column="last_seen" not-null="true" index="diff_last_seen" />
    <property name="upstreamVsn" type="string" column="upstream_vsn" />
    <property name="downstreamVsn" type="string" column="downstream_vsn" />
    <property name="ignored" type="boolean" column="ignored" />
  </class>

  <class name="StoreCheckpoint" table="store_checkpoints">
    <composite-id mapped="true">
      <key-many-to-one name="pair" class="net.lshift.diffa.kernel.config.DiffaPair" lazy="false">
        <column name="pair" />
        <column name="domain" />
      </key-many-to-one>
    </composite-id>
    <property name="latestVersion" type="long" column="latest_version" not-null="true"/>
  </class>

  <query name="storeCheckpointByPairAndDomain">
    select c from StoreCheckpoint c where c.pair.domain.name = :domain_name and c.pair.key = :pair_key
  </query>

  <query name="removeDomainCheckpoints">
    delete from StoreCheckpoint where domain = :domain_name
  </query>

  <query name="removeDomainDiffs">
    delete from ReportedDifferenceEvent where objId.pair.domain = :domain
  </query>
  <query name="removeDomainPendingDiffs">
    delete from PendingDifferenceEvent where objId.pair.domain = :domain
  </query>

  <query name="removeDiffsByEntityId">
    delete from ReportedDifferenceEvent
    where objId.pair.domain = :domain_name
    and objId.pair.key = :pair_key
    and objId.id = :entity_id
  </query>

  <query name="removePendingDiffsByEntityId">
    delete from PendingDifferenceEvent
    where objId.pair.domain = :domain_name
    and objId.pair.key = :pair_key
    and objId.id = :entity_id
  </query>

  <query name="expireMatches"><![CDATA[
    delete from ReportedDifferenceEvent where lastSeen < :cutoff and isMatch = true
  ]]></query>

  <query name="removeDiffsByPairAndDomain">
    delete from ReportedDifferenceEvent where objId.pair.key = :pairKey and objId.pair.domain = :domain
  </query>
  <query name="removePendingDiffsByPairAndDomain">
    delete from PendingDifferenceEvent where objId.pair.key = :pairKey and objId.pair.domain = :domain
  </query>

  <query name="pendingByDomainIdAndVersionID">
    select e from PendingDifferenceEvent e where
      e.objId.pair.domain = :domain and e.objId.pair.key = :pair and e.objId.id = :objId
  </query>
  <query name="eventByDomainAndVersionID">
    select e from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and e.objId.pair.key = :pair and e.objId.id = :objId
  </query>

  <query name="eventByDomainAndSeqId">
    select e from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and e.seqId = :seqId
  </query>
  <query name="eventsSinceByDomain">
    select e from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and e.seqId > :seqId
  </query>
  <query name="maxSeqIdByDomain">
    select max(e.seqId) from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain
  </query>
  <query name="unmatchedEventsInIntervalByDomain"><![CDATA[
    select e from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and
      e.detectedAt >= :start and e.detectedAt < :end and
      e.isMatch = false and
      e.ignored = false
  ]]></query>
  <query name="unmatchedEventsByDomainAndPair"><![CDATA[
    select e from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and e.objId.pair.key = :pair and
      e.isMatch = false and
      e.ignored = false
  ]]></query>
  <query name="unmatchedEventsInIntervalByDomainAndPair"><![CDATA[
    select e from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and e.objId.pair.key = :pair and
      e.detectedAt >= :start and e.detectedAt < :end and
      e.isMatch = false and
      e.ignored = false
  ]]></query>
  <query name="unmatchedEventsInIntervalByDomainAndPairWithIgnored"><![CDATA[
    select e from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and e.objId.pair.key = :pair and
      e.detectedAt >= :start and e.detectedAt < :end and
      e.isMatch = false
      order by e.seqId asc
  ]]></query>
  <query name="countEventsInIntervalByDomainAndPair"><![CDATA[
    select count(e) from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and e.objId.pair.key = :pair and
      e.detectedAt >= :start and e.detectedAt < :end and
      e.isMatch = false and
      e.ignored = false
  ]]></query>
  <query name="unmatchedEventsOlderThanCutoffByDomainAndPair"><![CDATA[
    select e from ReportedDifferenceEvent e where
      e.objId.pair.domain = :domain and e.objId.pair.key = :pair and
      e.isMatch = false and
      e.lastSeen < :cutoff
  ]]></query>

  <!--
    Mismatch aggregation queries - although written in native SQL, these must be portable
    across supported DBs
  -->

  <sql-query name="15_minute_aggregation"><![CDATA[
    select
      extract(year from d.detected_at) as year,
      extract(month from d.detected_at) as month,
      extract(day from d.detected_at) as day,
      extract(hour from d.detected_at) as hour,
      floor(extract(minute from d.detected_at)/15) * 15 as minute,
      count(*) as aggregate
    from
      diffs d
    where
      d.domain = :domain
      and d.pair = :pair
      and d.detected_at >= :lower_bound
      and d.detected_at <= :upper_bound
      and d.is_match = :matched
      and d.ignored = :ignored
    group by
      extract(year from d.detected_at),
      extract(month from d.detected_at),
      extract(day from d.detected_at),
      extract(hour from d.detected_at),
      floor(extract(minute from d.detected_at)/15) * 15
    order by
      year,month,day,hour,minute
  ]]></sql-query>

  <sql-query name="30_minute_aggregation"><![CDATA[
    select
      extract(year from d.detected_at) as year,
      extract(month from d.detected_at) as month,
      extract(day from d.detected_at) as day,
      extract(hour from d.detected_at) as hour,
      floor(extract(minute from d.detected_at)/30) * 30 as minute,
      count(*) as aggregate
    from
      diffs d
    where
      d.domain = :domain
      and d.pair = :pair
      and d.detected_at >= :lower_bound
      and d.detected_at <= :upper_bound
      and d.is_match = :matched
      and d.ignored = :ignored
    group by
      extract(year from d.detected_at),
      extract(month from d.detected_at),
      extract(day from d.detected_at),
      extract(hour from d.detected_at),
      floor(extract(minute from d.detected_at)/30) * 30
    order by
      year,month,day,hour,minute
  ]]></sql-query>

  <sql-query name="60_minute_aggregation"><![CDATA[
    select
      extract(year from d.detected_at) as year,
      extract(month from d.detected_at) as month,
      extract(day from d.detected_at) as day,
      extract(hour from d.detected_at) as hour,
      count(*) as aggregate
    from
      diffs d
    where
      d.domain = :domain
      and d.pair = :pair
      and d.detected_at >= :lower_bound
      and d.detected_at <= :upper_bound
      and d.is_match = :matched
      and d.ignored = :ignored
    group by
      extract(year from d.detected_at),
      extract(month from d.detected_at),
      extract(day from d.detected_at),
      extract(hour from d.detected_at)
    order by
      year,month,day,hour
  ]]></sql-query>

  <sql-query name="120_minute_aggregation"><![CDATA[
    select
      extract(year from d.detected_at) as year,
      extract(month from d.detected_at) as month,
      extract(day from d.detected_at) as day,
      floor(extract(hour from d.detected_at)/2) * 2 as hour,
      count(*) as aggregate
    from
      diffs d
    where
      d.domain = :domain
      and d.pair = :pair
      and d.detected_at >= :lower_bound
      and d.detected_at <= :upper_bound
      and d.is_match = :matched
      and d.ignored = :ignored
    group by
      extract(year from d.detected_at),
      extract(month from d.detected_at),
      extract(day from d.detected_at),
      floor(extract(hour from d.detected_at)/2) * 2
    order by
      year,month,day,hour
  ]]></sql-query>

  <sql-query name="240_minute_aggregation"><![CDATA[
    select
      extract(year from d.detected_at) as year,
      extract(month from d.detected_at) as month,
      extract(day from d.detected_at) as day,
      floor(extract(hour from d.detected_at)/4) * 4 as hour,
      count(*) as aggregate
    from
      diffs d
    where
      d.domain = :domain
      and d.pair = :pair
      and d.detected_at >= :lower_bound
      and d.detected_at <= :upper_bound
      and d.is_match = :matched
      and d.ignored = :ignored
    group by
      extract(year from d.detected_at),
      extract(month from d.detected_at),
      extract(day from d.detected_at),
      floor(extract(hour from d.detected_at)/4) * 4
    order by
      year,month,day,hour
  ]]></sql-query>

  <sql-query name="480_minute_aggregation"><![CDATA[
    select
      extract(year from d.detected_at) as year,
      extract(month from d.detected_at) as month,
      extract(day from d.detected_at) as day,
      floor(extract(hour from d.detected_at)/8) * 8 as hour,
      count(*) as aggregate
    from
      diffs d
    where
      d.domain = :domain
      and d.pair = :pair
      and d.detected_at >= :lower_bound
      and d.detected_at <= :upper_bound
      and d.is_match = :matched
      and d.ignored = :ignored
    group by
      extract(year from d.detected_at),
      extract(month from d.detected_at),
      extract(day from d.detected_at),
      floor(extract(hour from d.detected_at)/8) * 8
    order by
      year,month,day,hour
  ]]></sql-query>

  <sql-query name="daily_aggregation"><![CDATA[
    select
      extract(year from d.detected_at) as year,
      extract(month from d.detected_at) as month,
      extract(day from d.detected_at) as day,
      count(*) as aggregate
    from
      diffs d
    where
      d.domain = :domain
      and d.pair = :pair
      and d.detected_at >= :lower_bound
      and d.detected_at <= :upper_bound
      and d.is_match = :matched
      and d.ignored = :ignored
    group by
      extract(year from d.detected_at),
      extract(month from d.detected_at),
      extract(day from d.detected_at)
    order by
      year,month,day
  ]]></sql-query>

</hibernate-mapping>
